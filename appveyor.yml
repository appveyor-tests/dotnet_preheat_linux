init:
 - appveyor version
 - ps: Update-AppveyorBuild -Message "Image '$env:APPVEYOR_BUILD_WORKER_IMAGE'@'$env:APPVEYOR_BUILD_WORKER_CLOUD' cloud. $env:APPVEYOR_REPO_COMMIT_MESSAGE"
 - sh: echo $APPVEYOR_BUILD_WORKER_IMAGE
 - sh: echo $APPVEYOR_BUILD_WORKER_CLOUD
 - sh: grep VERSION= /etc/os-release
 - sh: |
    # Only use colors if connected to a terminal
    if [ -t 1 ]; then
      RED=$(printf '\033[31m')
      GREEN=$(printf '\033[32m')
      YELLOW=$(printf '\033[33m')
      BLUE=$(printf '\033[34m')
      BOLD=$(printf '\033[1m')
      RESET=$(printf '\033[m')
      NC=$(printf '\033[m')
    else
      RED=""
      GREEN=""
      YELLOW=""
      BLUE=""
      BOLD=""
      RESET=""
      NC=""
    fi
test_script:
 - sh: |
    function global_json() {
        echo "{
      \"sdk\": {
        \"version\": \"$1\"
      }
    }"
    }
    TEST_FAIL_FLAG=false
    WELCOME="^Welcome to .NET Core"
    for ver in $(dotnet --list-sdks|cut -f1 -d' '); do
        echo "${GREEN}Check for welcome message in .NET SDK '${ver}'${NC}"
        TMP_DIR=$(mktemp -d)
        pushd  "${TMP_DIR}"
        global_json ${ver} >global.json
        OUTPUT=$(dotnet new console)
        while read -r line; do
          if [[ $line =~ $WELCOME ]]; then
            echo "${RED}'$ver' is not pre-heated!${NC}"
            echo "${YELLOW}---- OUTPUT ----${NC}"
            echo "$OUTPUT"
            echo "${YELLOW}---- OUTPUT ----${NC}"
            TEST_FAIL_FLAG=true
          fi
        done <<< "${OUTPUT}"
        popd &&
        rm -rf "${TMP_DIR}"
    done
    if $TEST_FAIL_FLAG; then
        echo "${RED}Test failed!${NC}"
        exit 2
    fi
    
 - sh: ls -ltra "$HOME/.dotnet/"
 
build: off
